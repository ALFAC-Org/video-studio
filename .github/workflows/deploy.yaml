name: Deploy

on:
  workflow_dispatch:
    inputs:
      app_image_version:
        description: "Version of the application image"
        required: false
        default: "latest"

env:
  BUILD_VERSION: ${{ github.event.inputs.app_image_version || github.sha }}

jobs:
  setup-aws:
    name: Setup AWS
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ steps.get-db-host.outputs.db_host }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get RDS endpoint
        continue-on-error: true # if the DB is not set, we skip the remaining steps
        run: |
          DB_HOST=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_IDENTIFIER }} --query "DBInstances[0].Endpoint.Address" --output text)
          echo "::set-output name=db_host::$DB_HOST"

  build-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: setup-aws
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Load environment variables
      #   uses: thaind0/envfile@v1
      #   with:
      #     secrets: ${{ toJSON(secrets) }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          # build-args: |
          #   APPLICATION_VERSION=${{ env.BUILD_VERSION }}
          platforms: linux/amd64
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ env.BUILD_VERSION }}

  apply-new-version:
    name: Apply new version
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up environment
        run: echo "DB_HOST=${{ needs.setup-aws.outputs.db_host }}" >> $GITHUB_ENV

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Update Docker Image in deployment.yaml
        run: |
          sed -i 's|image: carlohcs/video-studio|image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ env.BUILD_VERSION }}|g' k8s/prod/backend/deployment.yaml

      - name: Overwrite Kubernetes Secrets
        run: |
          kubectl create secret generic secret-video-studio \
            --from-literal=APPLICATION_VERSION=${{ env.BUILD_VERSION }} \
            --from-literal=ENABLE_FLYWAY=${{ secrets.ENABLE_FLYWAY }} \
            --from-literal=SPRING_DATASOURCE_URL=jdbc:mysql://video-db.cm2fl7pdhlsm.us-east-1.rds.amazonaws.com:3306/${{ secrets.DB_NAME }} \
            --from-literal=SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Kube Apply
        run: |
          kubectl apply -f k8s/prod/shared/cm.yaml
          kubectl apply -f k8s/prod/backend
